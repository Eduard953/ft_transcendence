// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  // id42			Int
  createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

  email    String  @unique
  username String? @unique
  // hash		String
//   avatar   String?

  // hashedRtoken	String?
  // twoFAsecret		String?
  // twoFA			Boolean?	@default(false)

//   wins         Int   @default(0)
//   losses       Int   @default(0)
//   matchCount   Int   @default(0)
//   matchHistory Int[]

//   winRate  Float?
//   playTime Int    @default(0)
//   score    Int    @default(1200)
//   rank     Int?

//   follows    User[] @relation("UserFollows")
//   followedBy User[] @relation("UserFollows")

//   blocking  User[] @relation("UserBlocking")
//   blockedBy User[] @relation("UserBlocking")

//   owns        Channel[] @relation("owner")
//   administers Channel[] @relation("admin")
//   membership  Channel[] @relation("member")
//   invitedTo   Channel[] @relation("invite")
//   blockedIn   Channel[] @relation("blocked")

//   muted Mute[]

//   messages Msg[]

  @@unique([id, email])
  @@map("users")
}

model Channel {
  id Int @id @default(autoincrement())

  name      String   @default(uuid())
//   picture   String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   direct     Boolean @default(false)
//   private    Boolean @default(false)
//   isPassword Boolean @default(false)
//   password   String?
	owner String
//   owners  User[] @relation("owner")
//   admins  User[] @relation("admin")
//   members User[] @relation("member")
//   invited User[] @relation("invite")
//   banned  User[] @relation("blocked")

//   muted Mute[]

//   messages Msg[]

  @@unique([id])
}

// model Mute {
//   id        Int      @id @default(autoincrement())
//   finishAt  DateTime
//   checkAt   DateTime @default(now())
//   finished  Boolean  @default(false)
//   channelId Int
//   channel   Channel  @relation(fields: [channelId], references: [id])
//   userId    Int
//   muted     User     @relation(fields: [userId], references: [id])
// }

// model Msg {
//   id Int @id @default(autoincrement())

//   msg String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   owner   User    @relation(fields: [userId], references: [id])
//   userId  Int
//   channel Channel @relation(fields: [cid], references: [id])
//   cid     Int
// }

// model Game {
//   id          Int      @id @unique
//   playerLeft  Int
//   playerRight Int
//   scoreLeft   Int
//   scoreRight  Int
//   startedAt   DateTime
//   endedAt     DateTime
//   duration    Int?
// }
